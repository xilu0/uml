@startuml
namespace log {
    class Logger << (S,Aquamarine) >> {
        - outMu sync.Mutex
        - out io.Writer
        - prefix
        - flag atomic.Int32
        - isDiscard atomic.Bool

        - output(pc uintptr, calldepth int, appendOutput <font color=blue>func</font>([]byte) []byte) error

        + SetOutput(w io.Writer)
        + Output(calldepth int, s string) error
        + Print(v ...any)
        + Printf(format string, v ...any)
        + Println(v ...any)
        + Fatal(v ...any)
        + Fatalf(format string, v ...any)
        + Fatalln(v ...any)
        + Panic(v ...any)
        + Panicf(format string, v ...any)
        + Panicln(v ...any)
        + Flags() int
        + SetFlags(flag int)
        + Prefix() string
        + SetPrefix(prefix string)
        + Writer() io.Writer

    }
    interface io.Writer {
  + Write(p []byte) (n int, err error)
}

Logger -right-> io.Writer : writes to
}


@enduml